function generateElement(tag, attributes, content) {
    let element = `<${tag}`;
    for (let attribute in attributes) {
        if (attributes.hasOwnProperty(attribute)) {
            let value = attributes[attribute];
            if (typeof value === "string") {
                value = value.replace(/"/g, "&quot;");
            }
            element += ` ${attribute}="${value}"`;
        }
    }
    return `${element}>${!(content === undefined || content === null) && content}</${tag}>`;
}
function JHTMLtoHTML(jhtml) {
    let html = "";
    if (jhtml == "" || jhtml == undefined) return "";
    for (let element in jhtml) {
        if (jhtml.hasOwnProperty(element)) {
            let tag = element.split("-")[0], id = element.split("-")[1];
            id = id==undefined?"0":id;
            let attributes = jhtml[element], content = "";
            if (typeof attributes === "object") {
                if (attributes.hasOwnProperty("content")) {
                    if (typeof attributes["content"] === "object") {
                        content = JHTMLtoHTML(attributes["content"]);
                    } else {
                        content = attributes["content"];
                    }
                    delete attributes["content"];
                }
                html += `${generateElement(element, attributes, content)}`;
            } else if (tag !== "img") {
                content = attributes;
                if (tag === "head" && attributes.hasOwnProperty("content")) {
                    html += `${indent}<${tag}>`;
                    let headContent = attributes["content"];
                    for (let contentElement in headContent) {
                        if (headContent.hasOwnProperty(contentElement)) {
                            let contentId = contentElement.split("-")[1];
                            contentId = contentId === undefined ? "0" : contentId;
                            let contentAttributes = headContent[contentElement], contentContent = "";
                            if (typeof contentAttributes === "object") {
                                if (contentAttributes.hasOwnProperty("content")) {
                                    if (typeof contentAttributes["content"] === "object") {
                                        contentContent = JHTMLtoHTML(contentAttributes["content"]);
                                    } else {
                                        contentContent = contentAttributes["content"];
                                    }
                                    delete contentAttributes["content"];
                                }
                                html += `${indent}${generateElement(contentElement, contentAttributes, contentContent)}`;
                            }
                        }
                    }
                    html += `</${tag}>`;
                } else {
                    html += `<${tag} ${stringifyAttributes(attributes)}>${content}`;
                    if (tag !== "br") {
                        html += `${JHTMLtoHTML({ [`/${element}`]: {} })}`;
                    }
                }
            } else {
                html += `<${tag} ${stringifyAttributes(attributes)}>`;
            }
        }
    }
    html = html.replace(/-\d+/g, "");
    return html;
}

function stringifyAttributes(attributes) {
    let attrStr = "", value = ""
    for (let attr in attributes) {
        if (attributes.hasOwnProperty(attr)) {
            value = attributes[attr];
            if (typeof value === "string") {
                value = value.replace(/"/g, '\\"');
                attrStr += `${attr}="${value}" `;
            } else {
                attrStr += `${attr}=${value} `;
            }
        }
    }
    return attrStr.trim();
}
const roost = {
    parse: (js) => {
        let html = "";
        const h_htmlc = typeof js.html === "undefined" ? js : js.html.hasOwnProperty("content") ? js.html.content : js.html;
        const h_head = h_htmlc.head;
        const h_body = h_htmlc.body;
        const h_headc = typeof h_head === "undefined" ? js.head : h_head.hasOwnProperty("content") ? h_head.content : js.head;
        const h_bodyc = typeof h_head === "undefined" ? js.body : h_body.hasOwnProperty("content") ? h_body.content : js.body;
        return `<!DOCTYPE HTML><html lang="${typeof js.lang === "undefined" ? "en" : js.lang}">${h_headc && `<head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1.0">${JHTMLtoHTML(h_headc)}<!-- HTML Document generated by Roost. --></head>`}${h_bodyc && `<body>${JHTMLtoHTML(h_bodyc)}</body>`}</html>`;
    },
    compile: (js)=>parse(js)
};

export default roost;